package com.ing.blockchain.zk.ethereum;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.3.1.
 */
public final class ProofRepo extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b604051602080610dd38339810160405280805190602001909190505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610d578061007c6000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806358eba08214610067578063d49190fa1461017b578063dffdba011461023a578063e7be975a1461032a575b600080fd5b341561007257600080fd5b610100600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506103e0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610140578082015181840152602081019050610125565b50505050905090810190601f16801561016d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018657600080fd5b610238600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506105bb565b005b341561024557600080fd5b610328600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061074b565b005b341561033557600080fd5b6103c3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610ac4565b604051808381526020018281526020019250505060405180910390f35b6103e8610c72565b60006002858585600060405160200152604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182805190602001908083835b6020831015156104af578051825260208201915060208101905060208303925061048a565b6001836020036101000a038019825116818451168082178552505050505050905001935050505060206040518083038160008661646e5a03f115156104f357600080fd5b505060405180519050905060008082600019166000191681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ac5780601f10610581576101008083540402835291602001916105ac565b820191906000526020600020905b81548152906001019060200180831161058f57829003601f168201915b50505050509150509392505050565b60006002338585600060405160200152604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182805190602001908083835b602083101515610682578051825260208201915060208101905060208303925061065d565b6001836020036101000a038019825116818451168082178552505050505050905001935050505060206040518083038160008661646e5a03f115156106c657600080fd5b505060405180519050905081600080836000191660001916815260200190815260200160002090805190602001906106ff929190610c86565b5060006001600083600019166000191681526020019081526020016000208190555060016000036002600083600019166000191681526020019081526020016000208190555050505050565b60006002878787600060405160200152604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182805190602001908083835b60208310151561081257805182526020820191506020810190506020830392506107ed565b6001836020036101000a038019825116818451168082178552505050505050905001935050505060206040518083038160008661646e5a03f1151561085657600080fd5b5050604051805190509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a61d7e3e85856000808660001916600019168152602001908152602001600020866000604051602001526040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085815260200184815260200180602001806020018381038352858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156109895780601f1061095e57610100808354040283529160200191610989565b820191906000526020600020905b81548152906001019060200180831161096c57829003601f168201915b5050838103825284818151815260200191508051906020019080838360005b838110156109c35780820151818401526020810190506109a8565b50505050905090810190601f1680156109f05780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1515610a1257600080fd5b6102c65a03f11515610a2357600080fd5b5050506040518051905015610abb5760016000826000191660001916815260200190815260200160002054841115610a765783600160008360001916600019168152602001908152602001600020819055505b60026000826000191660001916815260200190815260200160002054831015610aba5782600260008360001916600019168152602001908152602001600020819055505b5b50505050505050565b6000806000806002878787600060405160200152604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182805190602001908083835b602083101515610b8f5780518252602082019150602081019050602083039250610b6a565b6001836020036101000a038019825116818451168082178552505050505050905001935050505060206040518083038160008661646e5a03f11515610bd357600080fd5b5050604051805190509150600080600084600019166000191681526020019081526020016000208054600181600116156101000203166002900490501490508015610c2b576000600160000381915093509350610c68565b6001600083600019166000191681526020019081526020016000205460026000846000191660001916815260200190815260200160002054935093505b5050935093915050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610cc757805160ff1916838001178555610cf5565b82800160010185558215610cf5579182015b82811115610cf4578251825591602001919060010190610cd9565b5b509050610d029190610d06565b5090565b610d2891905b80821115610d24576000816000905550600101610d0c565b5090565b905600a165627a7a7230582044af69041883f0ee76720c6c2cd604992ddb6babc84de7f3277d70f7ded4db3b0029";

    private ProofRepo(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private ProofRepo(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<DynamicBytes> getCommitment(Address attester, Address subject, Utf8String attribute) {
        Function function = new Function("getCommitment", 
                Arrays.<Type>asList(attester, subject, attribute), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> storeCommitment(Address subject, Utf8String attribute, DynamicBytes commitment) {
        Function function = new Function("storeCommitment", Arrays.<Type>asList(subject, attribute, commitment), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> revealRange(Address attester, Address subject, Utf8String attribute, Uint256 lower, Uint256 upper, DynamicBytes proof) {
        Function function = new Function("revealRange", Arrays.<Type>asList(attester, subject, attribute, lower, upper, proof), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<List<Type>> getRange(Address attester, Address subject, Utf8String attribute) {
        Function function = new Function("getRange", 
                Arrays.<Type>asList(attester, subject, attribute), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public static Future<ProofRepo> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Address rpv) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(rpv));
        return deployAsync(ProofRepo.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<ProofRepo> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Address rpv) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(rpv));
        return deployAsync(ProofRepo.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static ProofRepo load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofRepo(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static ProofRepo load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofRepo(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
